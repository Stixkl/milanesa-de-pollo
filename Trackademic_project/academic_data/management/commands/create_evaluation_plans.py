from django.core.management.base import BaseCommand
from student_portal.models import EvaluationPlan, EvaluationActivity
from academic_data.models import Group, Subject

class Command(BaseCommand):
    help = 'Crea planes de evaluaci√≥n de ejemplo seg√∫n el enunciado del proyecto'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ Creando planes de evaluaci√≥n de ejemplo...')
        
        # Plan para Bases de Datos (S105) - Grupo 1
        try:
            bases_datos_group = Group.objects.get(subject__code='S105', number=1)
            
            # Crear plan de evaluaci√≥n para Bases de Datos
            bd_plan, created = EvaluationPlan.objects.get_or_create(
                group=bases_datos_group,
                defaults={
                    'is_approved': True
                }
            )
            
            if created:
                self.stdout.write('‚úì Plan de Bases de Datos creado')
                
                # Actividades seg√∫n el enunciado
                activities_bd = [
                    ('Primera evaluaci√≥n', 10.0, 'Evaluaci√≥n te√≥rica de conceptos fundamentales'),
                    ('Segunda evaluaci√≥n', 20.0, 'Evaluaci√≥n de dise√±o conceptual y l√≥gico'),
                    ('Tercera evaluaci√≥n', 20.0, 'Evaluaci√≥n de implementaci√≥n y consultas'),
                    ('Primer entrega proyecto', 10.0, 'Entrega inicial del proyecto de base de datos'),
                    ('Quiz MER', 10.0, 'Quiz sobre Modelo Entidad-Relaci√≥n'),
                    ('Segunda entrega proyecto', 10.0, 'Entrega intermedia del proyecto'),
                    ('Tercera entrega proyecto', 10.0, 'Entrega final del proyecto'),
                    ('Quiz SQL', 10.0, 'Quiz sobre consultas SQL avanzadas'),
                ]
                
                for name, percentage, description in activities_bd:
                    EvaluationActivity.objects.create(
                        plan=bd_plan,
                        name=name,
                        percentage=percentage,
                        description=description
                    )
                    self.stdout.write(f'  ‚úì Actividad: {name} ({percentage}%)')
            
        except Group.DoesNotExist:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Grupo de Bases de Datos no encontrado'))
        
        # Plan para Programaci√≥n (S103) - Grupo 3
        try:
            prog_group = Group.objects.get(subject__code='S103', number=3)
            
            prog_plan, created = EvaluationPlan.objects.get_or_create(
                group=prog_group,
                defaults={
                    'is_approved': True
                }
            )
            
            if created:
                self.stdout.write('‚úì Plan de Programaci√≥n creado')
                
                activities_prog = [
                    ('Parcial 1', 25.0, 'Evaluaci√≥n de fundamentos de programaci√≥n'),
                    ('Parcial 2', 25.0, 'Evaluaci√≥n de estructuras de control y funciones'),
                    ('Proyecto Final', 30.0, 'Desarrollo de aplicaci√≥n completa'),
                    ('Talleres y Laboratorios', 15.0, 'Actividades pr√°cticas semanales'),
                    ('Participaci√≥n', 5.0, 'Participaci√≥n en clase y foros'),
                ]
                
                for name, percentage, description in activities_prog:
                    EvaluationActivity.objects.create(
                        plan=prog_plan,
                        name=name,
                        percentage=percentage,
                        description=description
                    )
                    self.stdout.write(f'  ‚úì Actividad: {name} ({percentage}%)')
                    
        except Group.DoesNotExist:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Grupo de Programaci√≥n no encontrado'))
        
        # Plan para C√°lculo I (S102) - Grupo 2
        try:
            calc_group = Group.objects.get(subject__code='S102', number=2)
            
            calc_plan, created = EvaluationPlan.objects.get_or_create(
                group=calc_group,
                defaults={
                    'is_approved': True
                }
            )
            
            if created:
                self.stdout.write('‚úì Plan de C√°lculo I creado')
                
                activities_calc = [
                    ('Primer Parcial', 30.0, 'L√≠mites y continuidad'),
                    ('Segundo Parcial', 30.0, 'Derivadas y aplicaciones'),
                    ('Examen Final', 25.0, 'Integrales y teorema fundamental'),
                    ('Quices', 10.0, 'Evaluaciones cortas semanales'),
                    ('Tareas', 5.0, 'Ejercicios para casa'),
                ]
                
                for name, percentage, description in activities_calc:
                    EvaluationActivity.objects.create(
                        plan=calc_plan,
                        name=name,
                        percentage=percentage,
                        description=description
                    )
                    self.stdout.write(f'  ‚úì Actividad: {name} ({percentage}%)')
                    
        except Group.DoesNotExist:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Grupo de C√°lculo I no encontrado'))
        
        # Plan para Estructuras de Datos (S104) - Grupo 1
        try:
            est_group = Group.objects.get(subject__code='S104', number=1)
            
            est_plan, created = EvaluationPlan.objects.get_or_create(
                group=est_group,
                defaults={
                    'is_approved': True
                }
            )
            
            if created:
                self.stdout.write('‚úì Plan de Estructuras de Datos creado')
                
                activities_est = [
                    ('Parcial Te√≥rico 1', 20.0, 'Arrays, listas y pilas'),
                    ('Parcial Te√≥rico 2', 20.0, '√Årboles y grafos'),
                    ('Proyecto Pr√°ctico 1', 15.0, 'Implementaci√≥n de estructuras lineales'),
                    ('Proyecto Pr√°ctico 2', 15.0, 'Implementaci√≥n de √°rboles'),
                    ('Proyecto Final', 20.0, 'Aplicaci√≥n completa con m√∫ltiples estructuras'),
                    ('Laboratorios', 10.0, 'Pr√°cticas semanales'),
                ]
                
                for name, percentage, description in activities_est:
                    EvaluationActivity.objects.create(
                        plan=est_plan,
                        name=name,
                        percentage=percentage,
                        description=description
                    )
                    self.stdout.write(f'  ‚úì Actividad: {name} ({percentage}%)')
                    
        except Group.DoesNotExist:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Grupo de Estructuras de Datos no encontrado'))
        
        # Plan para Psicolog√≠a General (S101) - Grupo 1
        try:
            psic_group = Group.objects.get(subject__code='S101', number=1)
            
            psic_plan, created = EvaluationPlan.objects.get_or_create(
                group=psic_group,
                defaults={
                    'is_approved': True
                }
            )
            
            if created:
                self.stdout.write('‚úì Plan de Psicolog√≠a General creado')
                
                activities_psic = [
                    ('Ensayo Reflexivo', 20.0, 'An√°lisis cr√≠tico de teor√≠as psicol√≥gicas'),
                    ('Examen Parcial', 25.0, 'Evaluaci√≥n de conceptos fundamentales'),
                    ('Proyecto de Investigaci√≥n', 25.0, 'Investigaci√≥n sobre un tema espec√≠fico'),
                    ('Presentaci√≥n Oral', 15.0, 'Exposici√≥n de proyecto de investigaci√≥n'),
                    ('Participaci√≥n y Foros', 10.0, 'Participaci√≥n activa en discusiones'),
                    ('Reporte de Lectura', 5.0, 'An√°lisis de textos especializados'),
                ]
                
                for name, percentage, description in activities_psic:
                    EvaluationActivity.objects.create(
                        plan=psic_plan,
                        name=name,
                        percentage=percentage,
                        description=description
                    )
                    self.stdout.write(f'  ‚úì Actividad: {name} ({percentage}%)')
                    
        except Group.DoesNotExist:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Grupo de Psicolog√≠a General no encontrado'))
        
        self.stdout.write(
            self.style.SUCCESS('üéâ ¬°Planes de evaluaci√≥n creados exitosamente!')
        )
        self.stdout.write(
            self.style.WARNING('üí° Ahora los estudiantes pueden ver y usar estos planes en "Explorar Planes de Evaluaci√≥n"')
        ) 